cmake_minimum_required(VERSION 3.13)

project (main CXX)

# compileflags
set(CMAKE_CSS_FLAGS "${CMAKE_CSS_FLAGS}" -Wall -Wextra -Wpedantic -std=c++17)

set(CMAKE_BUILD_TYPE Debug)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Add files
include_directories(include)
file (GLOB_RECURSE PROJECT_HEADERS include/*.h)
file (GLOB_RECURSE PROJECT_SOURCES src/*.cpp)
file (GLOB_RECURSE PROJECT_TESTS   test/unittests.cpp)

# set main as output executable
add_compile_options(${CMAKE_CSS_FLAGS})
add_executable (${PROJECT_NAME} ${PROJECT_SOURCES} ${PROJECT_TESTS})
set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD 17)

# add std::filesystem
target_link_libraries(${PROJECT_NAME} stdc++fs)

# unittest-cpp
find_package(UnitTest++ REQUIRED)
include_directories(${UTPP_INCLUDE_DIRS})
target_link_libraries(${PROJECT_NAME} UnitTest++)

# Tests generated by gen_test.sh
if (TESTS)
    file (GLOB_RECURSE PROJECT_TESTS_HEURISTICS test/*.cpp)
    add_executable(heuristic_tests ${PROJECT_SOURCES} ${PROJECT_TESTS_HEURISTICS})
    target_link_libraries(heuristic_tests UnitTest++)
endif()

# Cscope integration
find_program(CSCOPE cscope)
if( CSCOPE )
    set(AllFiles ${PROJECT_SOURCES} ${PROJECT_HEADERS})
    string(REPLACE ";" "\n" AllFiles "${AllFiles}")
    set(CSCOPE_FILES ${CMAKE_BINARY_DIR}/cscope.files)
    set(CSCOPE_DB ${CMAKE_BINARY_DIR}/cscope.out)
    file(WRITE ${CSCOPE_FILES} "${AllFiles}")

    ADD_CUSTOM_COMMAND(
        OUTPUT ${CSCOPE_DB}
        COMMAND cd ${CMAKE_BINARY_DIR} && cscope -b -q
        DEPENDS ${CSCOPE_FILES}
    )

    ADD_CUSTOM_TARGET(gen_cscope_db ALL
        DEPENDS ${CSCOPE_DB}
    )
endif()
